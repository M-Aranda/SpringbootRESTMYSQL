package src.main.java;

//import src.main.java.Usuario;
//import src.main.java.UsuarioRepository;
import java.util.Optional;
import javax.persistence.Version;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
//import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController    // This means that this class is a (Rest)Controller
@RequestMapping(path = "/usuarios") // This means URL's start with /usuarios (after Application path)
//creo que tambien puede ser @RequestMapping( "/usuarios"), osea, sin el path=
public class UsuarioController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UsuarioRepository usuarioRepository;

    //este metodo es el create
    @GetMapping(path = "/add") // Map ONLY GET Requests // seria http://localhost:8080/usuarios/add?id=null&nombre=algunombre&correo=alungmail@someemailprovider.com
    public @ResponseBody
    String addNewUser(@RequestParam String nombre,
            @RequestParam String correo) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Usuario n = new Usuario();
        n.setNombre(nombre);
        n.setCorreo(correo);
        usuarioRepository.save(n);
        return "Saved";
    }

    //este metodo es el read
    @GetMapping(path = "/all")//seria http://localhost:8080/usuarios/all
    public @ResponseBody
    Iterable<Usuario> getAllUsers() {
        return usuarioRepository.findAll();// This returns a JSON or XML with the users
    }

    //este metodo es el borrar
    @GetMapping(path = "/delete")//seria http://localhost:8080/usuarios/delete?id=1
    public @ResponseBody
    void delete(@RequestParam int id) {
        Usuario u = new Usuario();
        u.setId(id);

        usuarioRepository.delete(u);
    }
    
  
@Modifying
@Query("UPDATE usuario u set u.nombre = ?1, u.correo = ?2   where u.id = ?3")
void setUserInfoById(String nombre, String correo, Integer id){
    
}
    @Version
    @GetMapping(path = "/update") //seria http://localhost:8080/usuarios/update?id=algo&nombre=jajaja&correo=asdasds@someemailprovider.com
    public @ResponseBody
    void update(@RequestParam int id, @RequestParam String nombre, @RequestParam String correo) {//se usa save() para esto
        Optional<Usuario> optionalEntity = usuarioRepository.findById(id);
        Usuario u = optionalEntity.get();
        u.setNombre(nombre);
        u.setCorreo(correo);     
        usuarioRepository.save(u);
        

    }
}
